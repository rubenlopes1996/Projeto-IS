//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkDace.BotSpotSensors {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParkingSpot", Namespace="http://schemas.datacontract.org/2004/07/BOT_SpotSensors__SOAP_")]
    [System.SerializableAttribute()]
    public partial class ParkingSpot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BatteryStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BatteryStatus {
            get {
                return this.BatteryStatusField;
            }
            set {
                if ((this.BatteryStatusField.Equals(value) != true)) {
                    this.BatteryStatusField = value;
                    this.RaisePropertyChanged("BatteryStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BotSpotSensors.IServiceBot_SpotSensor")]
    public interface IServiceBot_SpotSensor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorData", ReplyAction="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataResponse")]
        ParkDace.BotSpotSensors.ParkingSpot[] CreateSensorData(int id, int numberOfSpots);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorData", ReplyAction="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataResponse")]
        System.Threading.Tasks.Task<ParkDace.BotSpotSensors.ParkingSpot[]> CreateSensorDataAsync(int id, int numberOfSpots);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataXML", ReplyAction="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataXMLResponse")]
        string CreateSensorDataXML(string id, int numberOfSpots);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataXML", ReplyAction="http://tempuri.org/IServiceBot_SpotSensor/CreateSensorDataXMLResponse")]
        System.Threading.Tasks.Task<string> CreateSensorDataXMLAsync(string id, int numberOfSpots);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBot_SpotSensorChannel : ParkDace.BotSpotSensors.IServiceBot_SpotSensor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBot_SpotSensorClient : System.ServiceModel.ClientBase<ParkDace.BotSpotSensors.IServiceBot_SpotSensor>, ParkDace.BotSpotSensors.IServiceBot_SpotSensor {
        
        public ServiceBot_SpotSensorClient() {
        }
        
        public ServiceBot_SpotSensorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceBot_SpotSensorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBot_SpotSensorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBot_SpotSensorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ParkDace.BotSpotSensors.ParkingSpot[] CreateSensorData(int id, int numberOfSpots) {
            return base.Channel.CreateSensorData(id, numberOfSpots);
        }
        
        public System.Threading.Tasks.Task<ParkDace.BotSpotSensors.ParkingSpot[]> CreateSensorDataAsync(int id, int numberOfSpots) {
            return base.Channel.CreateSensorDataAsync(id, numberOfSpots);
        }
        
        public string CreateSensorDataXML(string id, int numberOfSpots) {
            return base.Channel.CreateSensorDataXML(id, numberOfSpots);
        }
        
        public System.Threading.Tasks.Task<string> CreateSensorDataXMLAsync(string id, int numberOfSpots) {
            return base.Channel.CreateSensorDataXMLAsync(id, numberOfSpots);
        }
    }
}
